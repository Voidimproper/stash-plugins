[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "stash-plugins"
version = "1.0.0"
description = "Collection of plugins for Stash media management system"
readme = "README.md"
license = {file = "LICENCE"}
authors = [
    {name = "VoidImproper", email = "void.improper+gh@gmail.com"},
]
maintainers = [
    {name = "VoidImproper", email = "void.improper+gh@gmail.com"},
]
keywords = ["stash", "media", "management", "plugins", "adult", "content"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: GNU Affero General Public License v3",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Multimedia :: Video",
]
requires-python = ">=3.8"
dependencies = [
    "stashapp-tools>=0.2.0",
    "requests>=2.28.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.0.0",
    "responses>=0.23.0",
    "freezegun>=1.2.0",

    # Code quality
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",

    # Documentation
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "responses>=0.23.0",
    "freezegun>=1.2.0",
]

lint = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
]

docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]

[project.urls]
Homepage = "https://github.com/Voidimproper/stash-plugins"
Repository = "https://github.com/Voidimproper/stash-plugins"
Documentation = "https://docs.stashapp.cc"
Wiki = "https://github.com/Voidimproper/stash-plugins/wiki"
"Bug Tracker" = "https://github.com/Voidimproper/stash-plugins/issues"
"Community" = "https://discord.gg/2TsNFKt"

[project.scripts]
# Plugin entry points can be added here if needed
# gallery-linker = "plugins.GalleryLinker.gallery_linker:main"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["plugins*", "tests*"]

[tool.setuptools.package-data]
"*" = ["*.yml", "*.yaml", "*.json", "*.md", "*.txt"]

# Black configuration
[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["plugins", "tests"]
known_third_party = ["stashapi", "requests", "pytest"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "plugins.*"
disallow_untyped_defs = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--cov=plugins",
    "--cov-report=term-missing",
    "--cov-report=html:tests/htmlcov",
    "--cov-report=xml:tests/coverage.xml",
    # "--import-mode=importlib",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "network: Tests that require network access",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
]
pythonpath = [
    "./plugins", 
    "./plugins/GalleryLinker", 
    "./tests"
    ]
# Coverage configuration
[tool.coverage.run]
source = ["plugins"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "tests/htmlcov"

# Flake8 configuration (in setup.cfg format since flake8 doesn't support pyproject.toml yet)
# Will be moved to pyproject.toml when flake8 supports it

# Bandit security linting configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_other

# Pre-commit hooks configuration
[[tool.pre-commit.repos]]
repo = "https://github.com/pre-commit/pre-commit-hooks"
rev = "v4.4.0"
hooks = [
    {id = "trailing-whitespace"},
    {id = "end-of-file-fixer"},
    {id = "check-yaml"},
    {id = "check-added-large-files"},
    {id = "check-merge-conflict"},
    {id = "debug-statements"},
]

[[tool.pre-commit.repos]]
repo = "https://github.com/psf/black"
rev = "23.3.0"
hooks = [{id = "black"}]

[[tool.pre-commit.repos]]
repo = "https://github.com/pycqa/isort"
rev = "5.12.0"
hooks = [{id = "isort"}]

[[tool.pre-commit.repos]]
repo = "https://github.com/pycqa/flake8"
rev = "6.0.0"
hooks = [{id = "flake8"}]

[[tool.pre-commit.repos]]
repo = "https://github.com/pre-commit/mirrors-mypy"
rev = "v1.3.0"
hooks = [{id = "mypy", additional_dependencies = ["types-requests"]}]

# Ruff configuration (alternative to flake8)
[tool.ruff]
target-version = "py38"
line-length = 120
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["plugins", "tests"]
known-third-party = ["stashapi", "requests", "pytest"]

# Pyright configuration
[tool.pyright]
include = ["plugins", "tests"]
exclude = ["**/__pycache__"]
venvPath = "."
venv = "venv"
pythonVersion = "3.8"
pythonPlatform = "All"
typeCheckingMode = "basic"
reportMissingImports = true
reportMissingTypeStubs = false
reportGeneralTypeIssues = true
reportOptionalMemberAccess = false
reportOptionalCall = false
reportOptionalOperand = false

# Pylint configuration
[tool.pylint.messages_control]
disable = [
    "missing-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
    "duplicate-code",
]

[tool.pylint.format]
max-line-length = 120

# Sphinx documentation configuration
[tool.sphinx]
project = "Stash Plugins"
copyright = "2023, Stash Community"
author = "Stash Community"
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.viewcode",
    "sphinx.ext.napoleon",
    "myst_parser",
]
html_theme = "sphinx_rtd_theme"
html_static_path = ["_static"]