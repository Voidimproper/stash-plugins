# generated by datamodel-codegen:
#   filename:  stats.graphql
#   timestamp: 2025-09-22T07:37:06+00:00

from __future__ import annotations

from typing import Literal, Optional, TypeAlias

from pydantic import BaseModel, Field

Boolean: TypeAlias = bool
"""
The `Boolean` scalar type represents `true` or `false`.
"""


Float: TypeAlias = float
"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""


Int: TypeAlias = int
"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""


String: TypeAlias = str
"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""


class StatsResultType(BaseModel):
    gallery_count: Int
    group_count: Int
    image_count: Int
    images_size: Float
    movie_count: Int
    performer_count: Int
    scene_count: Int
    scenes_duration: Float
    scenes_played: Int
    scenes_size: Float
    studio_count: Int
    tag_count: Int
    total_o_count: Int
    total_play_count: Int
    total_play_duration: Float
    typename__: Optional[Literal["StatsResultType"]] = Field("StatsResultType", alias="__typename")
