# generated by datamodel-codegen:
#   filename:  plugin.graphql
#   timestamp: 2025-09-22T07:36:42+00:00

from __future__ import annotations

from enum import Enum
from typing import Literal, Optional, TypeAlias

from pydantic import BaseModel, Field

Boolean: TypeAlias = bool
"""
The `Boolean` scalar type represents `true` or `false`.
"""


Float: TypeAlias = float
"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""


ID: TypeAlias = str
"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""


Int: TypeAlias = int
"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""


String: TypeAlias = str
"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""


class PluginSettingTypeEnum(Enum):
    BOOLEAN = "BOOLEAN"
    NUMBER = "NUMBER"
    STRING = "STRING"


class Plugin(BaseModel):
    description: Optional[String] = None
    enabled: Boolean
    hooks: Optional[list[PluginHook]] = None
    id: ID
    name: String
    paths: PluginPaths
    requires: Optional[list[ID]] = Field(
        None,
        description="Plugin IDs of plugins that this plugin depends on.\nApplies only for UI plugins to indicate css/javascript load order.",
    )
    settings: Optional[list[PluginSetting]] = None
    tasks: Optional[list[PluginTask]] = None
    url: Optional[String] = None
    version: Optional[String] = None
    typename__: Optional[Literal["Plugin"]] = Field("Plugin", alias="__typename")


class PluginHook(BaseModel):
    description: Optional[String] = None
    hooks: Optional[list[String]] = None
    name: String
    plugin: Plugin
    typename__: Optional[Literal["PluginHook"]] = Field("PluginHook", alias="__typename")


class PluginPaths(BaseModel):
    css: Optional[list[String]] = None
    javascript: Optional[list[String]] = None
    typename__: Optional[Literal["PluginPaths"]] = Field("PluginPaths", alias="__typename")


class PluginResult(BaseModel):
    error: Optional[String] = None
    result: Optional[String] = None
    typename__: Optional[Literal["PluginResult"]] = Field("PluginResult", alias="__typename")


class PluginSetting(BaseModel):
    description: Optional[String] = None
    display_name: Optional[String] = None
    name: String
    type: PluginSettingTypeEnum
    typename__: Optional[Literal["PluginSetting"]] = Field("PluginSetting", alias="__typename")


class PluginTask(BaseModel):
    description: Optional[String] = None
    name: String
    plugin: Plugin
    typename__: Optional[Literal["PluginTask"]] = Field("PluginTask", alias="__typename")


class PluginArgInput(BaseModel):
    key: String
    value: Optional[PluginValueInput] = None
    typename__: Optional[Literal["PluginArgInput"]] = Field("PluginArgInput", alias="__typename")


class PluginValueInput(BaseModel):
    a: Optional[list[PluginValueInput]] = None
    b: Optional[Boolean] = None
    f: Optional[Float] = None
    i: Optional[Int] = None
    o: Optional[list[PluginArgInput]] = None
    str: Optional[String] = None
    typename__: Optional[Literal["PluginValueInput"]] = Field("PluginValueInput", alias="__typename")
